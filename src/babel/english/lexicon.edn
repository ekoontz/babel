{"Antonella"
 {:synsem {:sem {:pred :antonella
                 :prop {:human true}}
           :propernoun true
           :agr {:number :sing
                 :person :3rd
                 :gender :fem}}}
 "Antonia"
 {:synsem {:sem {:pred :antonia
                 :prop {:human true}}
           :propernoun true
           :agr {:number :sing
                 :person :3rd
                 :gender :fem}}}

 "Antonia and Luisa"
 {:synsem {:propernoun true
           :agr {:number :plur
                 :person :3rd
                 :gender :fem}
           :sem {:pred :antonia-and-luisa
                 :prop {:human true}}}}

 "Antonio"
 {:synsem {:propernoun true
           :agr {:number :sing
                 :person :3rd
                 :gender :masc}
           :sem {:pred :antonio
                 :prop {:human true}}}}
 "a"
 {:synsem {:cat :det
           :def :indef
           :mass false
           :sem {:pred :indefinite
                 :of {:pred nil}}
           :agr {:number :sing}}}

 "abandon" [{:synsem {:cat :verb
                      :sem {:pred :abandon}
                      :subcat {:1 {:cat :noun}
                               :2 {:cat :noun}}}}]

 "accept"  {:synsem {:cat :verb
                     :sem {:pred :accept}}}

 "accompany" {:synsem {:cat :verb
                       :sem {:pred :accompany}
                       :subcat {:1 {:cat :noun}
                                :2 {:cat :noun}
                                :3 []}}
              :english {:past "accompanied"}}

 "add" {:synsem {:cat :verb
                 :sem {:pred :add}}}

 "admire" {:synsem {:cat :verb
                    :sem {:pred :admire}}}

 "announce" {:synsem {:cat :verb
                      :sem {:pred :announce}}}

 "answer" {:synsem {:cat :verb
                    :sem {:pred :answer}}}

 "approve" {:synsem {:cat :verb
                     :sem {:pred :approve}}}

 "arrive" [{:synsem {:cat :verb
                     :sem {:pred :arrive
                           :subcat {:2 {:cat :prep
                                        :sem {:pred :at}}}}}}
           {:synsem {:cat :verb
                     :sem {:pred :arrive
                           :subcat {:2 []}}}}]

 "ask" {:synsem {:cat :verb
                 :sem {:pred :ask-for}}}

 "assume" {:synsem {:cat :verb
                    :sem {:pred :assume}
                    :subcat {:1 {:cat :noun}
                             :2 {:cat :comp
                                 :comp-type :that
                                 :subcat []}}}}
 "assure" {:synsem {:cat :verb
                    :sem {:pred :assure}}}

 "at" (let [obj (atom {:place true})]
        {:synsem {:cat :prep
                  :subcat {:1 {:cat :noun
                               :sem obj}}
                  :sem {:obj obj
                        :pred :at}}})

 "attend" {:synsem {:cat :verb
                    :sem {:pred :attend}
                    :subcat {:1 {:cat :noun}
                             :2 {:cat :noun}}}}

 "avoid" {:synsem {:cat :verb
                   :sem {:pred :avoid}
                   :subcat {:1 {:cat :noun}
                            :2 {:cat :noun}}}}

 "back" {:synsem {:cat :prep
                  :sem {:pred :back}
                  :subcat []}}

 "backpack" {:synsem {:cat :noun
                      :sem {:pred :backpack}}}

 "bag" {:synsem {:cat :noun
                 :sem {:pred :bag}}}

 "base" {:synsem {:cat :verb
                  :sem {:pred :support}}}

 ;; TODO: add {:pred :exists} to "be"
 ;; (with both null and non-null subject, as with "exist")
 "be" (let [number-agr (atom :top)
            common {:synsem {:cat :verb}
                    :english {:present {:1sing "am"
                                        :2sing "are"
                                        :3sing "is"
                                        :1plur "are"
                                        :2plur "are"
                                        :3plur "are"}
                              :present-progressive :avoid
                              :past {:1sing "was"
                                     :2sing "were"
                                     :3sing "was"
                                     :1plur "were"
                                     :2plur "were"
                                     :3plur "were"}
                              :past-participle "been"}}]
        [;; intransitive
         {:unify [common]
          :sense 1
          :synsem {:subcat {:1 {:cat :noun}
                            :2 []}
                   :sem {:pred :be}}}

         ;; be + propernoun, e.g. "My name is John"
         (let [gender (atom :top)
               number (atom :top)
               subj-agr (atom {:person :3rd
                               :gender gender
                               :number number})
               infl (atom :top)
               the-real-subj (atom :top)
               the-obj (atom {:number number
                              :gender gender})] ;; prevents e.g. "Her name is John"
           {:unify [common]
            :sense 2 ;; :sense is meant to be used for debugging suspected problems
            ;; with lexical compilation.
            ;; TODO: remove (in)transtivize (false|true): should not
            ;; need these explicit compiler directives; compilation
            ;; should be able to manage on its own
            :intransitivize false
            :transitivize false
            :synsem {:agr subj-agr
                     :sem {:aspect :simple
                           :pred :be-called
                           :reflexive true
                           :subj the-real-subj
                           :obj the-real-subj
                           :iobj the-obj}
                     :subcat {:1 {:cat :noun
                                  :case :nom ;; TODO: this should be a general lexical post-processing step -
                                  ;; call it subject-is-nominative or similar.
                                  :agr subj-agr
                                  :sem {:pred :name  ;; "My name" in "My name is John"
                                        :subj the-real-subj}}
                              
                              :2 {:cat :noun
                                  :agr subj-agr
                                  :sem the-obj
                                  :pronoun false
                                  :propernoun true} ;; "John" in "My name is John"
                              
                              :3 []}}})
         ;; subcat {
         ;; synsem {
         ;; end of map
         ;; "be + PP": "I am at the beach"
         (let [pred (atom :top)
               ;; Needed because {:pred :top} to prevent matching of {:obj :unspec}
               ;; yielding incorrect translations.
               obj (atom {:top :top})]
           {:unify [common]
            :intransitivize false
            :sense 3
            :synsem {:cat :verb
                     :sem {:obj obj
                           :reflexive false
                           :pred pred
                           :shared-with-obj true}
                     :subcat {:1 {:cat :noun}
                              :2 {:cat :prep
                                  :reflexive false
                                  :sem {:obj obj
                                        :pred pred}}
                              :3 []}}})
         ;; "be + PP": reflexive
         (let [pred (atom :top)
               obj (atom :top)
               ;; Needed because {:pred :top} to prevent matching of {:obj :unspec}
               ;; yielding incorrect translations.
               agr (atom {:top :top})]
           {:unify [common]
            :intransitivize false
            :sense 4
            :synsem {:cat :verb
                     :sem {:subj obj ;; reflexive: subj=obj
                           :obj obj
                           :reflexive true
                           :pred pred
                           ;; TODO: this should be a default
                           ;; lexical rule: should not need to
                           ;; do it per-verb.
                           :shared-with-obj true}
                     :subcat {:1 {:cat :noun
                                  :agr agr}
                              :2 {:cat :prep
                                  :reflexive true
                                  :agr agr
                                  :sem {:obj obj
                                        :pred pred}}
                              :3 []}}})])

 "be able" (let [common {:english {:imperfect {:1sing "was able"
                                               :2sing "were able"
                                               :3sing "was able"
                                               :1plur "were able"
                                               :2plur "were able"
                                               :3plur "were able"}

                                   ;; TODO: improve this. Currently sounds pretty awkward:
                                   ;; "he was being able"
                                   :participle "being able"
                                   :past-participle "been able"

                                   :present {:1sing "am able"
                                             :2sing "are able"
                                             :3sing "is able"
                                             :1plur "are able"
                                             :2plur "are able"
                                             :3plur "are able"}
                                   :past {:1sing "was able"
                                          :2sing "were able"
                                          :3sing "was able"
                                          :1plur "were able"
                                          :2plur "were able"
                                          :3plur "were able"}}}]
             [{:unify [common]
               :modal-with :infinitive
               :synsem {:cat :verb
                        :sem {:pred :be-able-to}}}
              {:unify [common]
               :synsem {:cat :verb
                        :sem {:pred :be-able-to}
                        :subcat {:1 {:cat :top}
                                 :2 []}}}])

 "be born" {:synsem {:cat :verb
                     :sem {:pred :be-born}
                     :subcat {:2 []}}
            :english {:future "be born"
                      :participle "being born"
                      :conditional "be born"
                      :imperfect {:1sing "was being born"
                                  :2sing "were being born"
                                  :3sing "was being born"
                                  :1plur "were being born"
                                  :2plur "were being born"
                                  :3plur "were being born"}
                      :past {:english "was born"
                             :2sing "were born"
                             :2plur "were born"
                             :3plur "were born"}
                      :present {:1sing "am born"
                                :2sing "are born"
                                :3sing "is born"
                                :1plur "are born"
                                :2plur "are born"
                                :3plur "are born"}
                      :past-participle "been born"}}


 "be called" {:synsem {:cat :verb
                       :sem {:pred :be-called
                             :iobj :unspec}
                       :subcat {:2 []}}
              :english {:future "be called"
                        :participle "being called"
                        :conditional "be called"
                        :imperfect {:1sing "was being called"
                                    :2sing "were being called"
                                    :3sing "was being called"
                                    :1plur "were being called"
                                    :2plur "were being called"
                                    :3plur "were being called"}
                        :past {:english "was called"
                               :2sing "were called"
                               :2plur "were called"
                               :3plur "were called"}
                        :present {:1sing "am called"
                                  :2sing "are called"
                                  :3sing "is called"
                                  :1plur "are called"
                                  :2plur "are called"
                                  :3plur "are called"}
                        :past-participle "been called"}}

 "be missed" {:synsem {:cat :verb
                       :sem {:pred :mancare}
                       :subcat {:2 []}}
              :english {:future "be missed"
                        :present-progressive :avoid
                        :participle "being missed"
                        :past-participle "been missed"
                        :conditional "be missed"
                        :imperfect {:1sing "was being missed"
                                    :2sing "were being missed"
                                    :3sing "was being missed"
                                    :1plur "were being missed"
                                    :2plur "were being missed"
                                    :3plur "were being missed"}
                        :past {:english "was missed"
                               :2sing "were missed"
                               :2plur "were missed"
                               :3plur "were missed"}
                        :present {:1sing "am missed"
                                  :2sing "are missed"
                                  :3sing "is missed"
                                  :1plur "are missed"
                                  :2plur "are missed"
                                  :3plur "are missed"}}}

 ;; TODO: for imperfect, generates things like 'he was be missinging'.
 "be missing" {:active false ;; don't use because of awkward English progressive aspect: "He is being missing"
               :english {:imperfect {:1sing "was missing"
                                     :2sing "were missing"
                                     :3sing "was missing"
                                     :1plur "were missing"
                                     :2plur "were missing"
                                     :3plur "were missing"}
                         :present-progressive :avoid
                         :present {:1sing "am missing"
                                   :2sing "are missing"
                                   :3sing "is missing"
                                   :1plur "are missing"
                                   :2plur "are missing"
                                   :3plur "are missing"}
                         :past {:1sing "was missing"
                                :2sing "were missing"
                                :3sing "was missing"
                                :1plur "were missing"
                                :2plur "were missing"
                                :3plur "were missing"}}
               :synsem {:cat :verb
                        :sem {:pred :be-missing}}}

 "be necessary"
 (let [common {:synsem {:cat :verb
                        :subcat {:2 []}}
               :english {:future "be necessary"
                         :participle "being necessary"
                         :past-participle "been necessary"
                         :conditional "be necessary"
                         :imperfect {:1sing "was being necessary"
                                     :2sing "were being necessary"
                                     :3sing "was being necessary"
                                     :1plur "were being necessary"
                                     :2plur "were being necessary"
                                     :3plur "were being necessary"}
                         :past {:1sing "was necessary"
                                :2sing "were necessary"
                                :2plur "were necessary"
                                :3plur "were necessary"}
                         :present {:1sing "am necessary"
                                   :2sing "are necessary"
                                   :3sing "is necessary"
                                   :1plur "are necessary"
                                   :2plur "are necessary"
                                   :3plur "are necessary"}}}]
   [{:unify [common]
     :synsem {:sem {:pred :be-necessary-s...}}}
    {:unify [common]
     :synsem {:sem {:pred :be-necessary-b...}}}])

 "be pleasant" {:synsem {:cat :verb
                         :sem {:pred :be-pleasant}
                         :subcat {:2 []}}
                :english {:future "be pleasant"
                          :participle "being pleasant"
                          :past-participle "been pleasant"
                          :conditional "be pleasant"
                          :imperfect {:1sing "was being pleasant"
                                      :2sing "were being pleasant"
                                      :3sing "was being pleasant"
                                      :1plur "were being pleasant"
                                      :2plur "were being pleasant"
                                      :3plur "were being pleasant"}
                          :past {:english "was pleasant"
                                 :2sing "were pleasant"
                                 :2plur "were pleasant"
                                 :3plur "were pleasant"}
                          :present {:1sing "am pleasant"
                                    :2sing "are pleasant"
                                    :3sing "is pleasant"
                                    :1plur "are pleasant"
                                    :2plur "are pleasant"
                                    :3plur "are pleasant"}}}

 "beach" {:synsem {:cat :noun
                   :sem {:place true
                         :pred :beach
                         :artifact false}}}
 "become" (let [common
                {:english {:past "became"
                           :past-participle "become"}}]
            [{:unify [common]
              :synsem {:cat :verb
                       :sem {:pred :become}
                       :subcat {:2 {:cat :adjective}}}}
             {:unify [common]
              :synsem {:cat :verb
                       :sem {:pred :become}
                       :subcat {:2 []}}}])
 "begin" (let [common
               {:english {:past "began"
                          :past-participle "begun"
                          :participle "beginning"}}]
           [{:unify [common]
             :synsem {:cat :verb
                      :sem {:pred :begin}
                      :subcat {:2 []}}}
            {:unify [common]
             :synsem {:cat :verb
                      :sem {:pred :begin}}
             :model-with :infinitive}])

 "believe" (let [common {:synsem {:cat :verb
                                  :subcat {:1 {:cat :noun}}}}]
             [{:unify [common]
               :synsem {:sem {:pred :believe}
                        :subcat {:2 []}}} ;; intransitive
              {:unify [common]
               :synsem {:sem {:pred :believe}
                        :subcat {:2 {:cat :comp
                                     :comp-type :that
                                     :subcat []}
                                 :3 []}}}])
 "bicycle" {:synsem {:cat :noun
                     :sem {:pred :bicycle
                           :artifact true
                           :consumable false
                           :place false}}}

 "bird" {:synsem {:cat :noun
                  :sem {:pred :bird}}}
 "black"
 {:synsem {:cat :adjective
           :sem {:pred :black
                 :prop {:physical-object true
                        :human false}}}}

 "boil" {:synsem {:cat :verb
                  :sem {:pred :boil}}}
 "book"
 {:synsem {:cat :noun
           :sem {:pred :book
                 ;; TODO: move to encyclopedia/nouns.edn.
                 :prop {:artifact true
                        :legible true
                        :speakable false
                        :mass false
                        :place false
                        :consumable false}}}}

 "break" {:english {:past "broke"
                    :past-participle "broken"}
          :synsem {:cat :verb
                   :sem {:pred :break}}}
 "bread"
 ;; inherently singular.
 {:synsem {:agr {:number :sing}
           :cat :noun
           :sem {:pred :bread
                 ;; TODO: move to encyclopedia/nouns.edn.
                 :prop {:edible true
                        :artifact true}}
           :subcat {:1 {:cat :det
                        :def :def}}}}

 "bring" (let [common {:english {:past "brought"}}]
           [{:unify [common]
             :synsem {:cat :verb
                      :sem {:pred :bring}}}
            {:unify [common]
             :synsem {:cat :verb
                      :sem {:pred :bring-l}}}
            {:unify [common]
             :synsem {:cat :verb
                      :sem {:pred :bring-t}}}])

 "burn" {:synsem {:cat :verb
                  :sem {:pred :burn}}
         :english {:past "burnt"}}

 "buy" {:synsem {:cat :verb
                 :sem {:pred :buy}}
        :english {:past "bought"
                  :present {:3sing "buys"}}}

 "call" {:synsem {:cat :verb
                  :sem {:pred :call}}}
 "can"
 {:english {:participle "being able to"
            :present-progressive :avoid
            :past "could"
            :past-participle "been able to"
            :imperfect {:1sing "used to be able to"
                        :2sing "used to be able to"
                        :3sing "used to be able to"
                        :1plur "used to be able to"
                        :2plur "used to be able to"
                        :3plur "used to be able to"}
            :present {:3sing "can"}
            :future "be able to"
            :conditional "be able to"}
  :modal-with :root
  :synsem {:cat :verb
           :sem {:pred :be-able-to}}}

 "cancel" {:english {:past "cancelled"
                     :participle "cancelling"}
           :synsem {:cat :verb
                    :sem {:pred :cancel}}}


 "car" {:synsem {:cat :noun
                 :sem {:pred :car}}}

 "carry" {:synsem {:cat :verb
                   :sem {:pred :carry}}
          :english {:past "carried"}}

 "cat" {:synsem {:cat :noun
                 :sem {:pred :cat}}}

 "chair" {:synsem {:cat :noun
                   :sem {:pred :chair}}}

 "change" {:synsem {:cat :verb
                    :sem {:pred :change}}} ;; TODO: add reflexive sense

 ;; TODO: move this to "change" with a subcat argument, a la phrasal verbs e.g. "putting on"
 "change clothes" {:synsem {:cat :verb
                            :sem {:pred :change-clothes
                                  :reflexive true}
                            :subcat {:2 []}}
                   :english {:present {:3sing "changes clothes"}
                             :participle "changing clothes"
                             :past "changed clothes"}}

 "chat" (let [common {:synsem {:cat :verb
                               :sem {:pred :chat}}
                      :english {:participle "chatting"
                                :past "chatted"}}]
          [;; intransitive TODO: remove: intransitivization should happen automatically in lexical compilation.
           {:unify [common]
            :synsem {:subcat {:2 []}}}
           {:unify [common] ;; transitive "chatted with <human>"
            :share-sem :obj
            :synsem {:subcat {:2 {:cat :prep
                                  :sem {:pred :with}
                                  :subcat []}}}}])

 "charge" {:synsem {:cat :verb
                    :sem {:pred :charge}}}

 "check" {:synsem {:cat :verb
                   :sem {:pred :check}}}

 "city" {:synsem {:cat :noun
                  :sem {:pred :city
                        :city true}}}

 "clean" {:synsem {:cat :verb
                   :sem {:pred :clean}}}

 "climb" {:synsem {:cat :verb
                   :subcat {:2 []}
                   :sem {:pred :climb
                         :reflexive true}}}

 "close" {:synsem {:cat :verb
                   :sem {:pred :close}}}

 "coffee" {:synsem {:cat :noun
                    :sem {:pred :coffee}}}

 "comb" [;; 1. reflexive sense
         {:synsem {:cat :verb
                   :sem {:pred :comb-oneself
                         :reflexive true}}}
                                        ; ;2. non-reflexive sense
         {:synsem {:cat :verb
                   :sem {:pred :comb}}}]

 "come" {:synsem {:cat :verb
                  :sem {:pred :come}
                  :subcat {:2 []}}
         :english {:past "came"
                   :past-participle "come"}}

 "comment" {:synsem {:cat :verb
                     :sem {:pred :comment}}}

 "confess" {:synsem {:cat :verb
                     :sem {:pred :confess}
                     :subcat {:2 {:cat :prep
                                  :sem {:pred :to}}}}}

 "complain" {:synsem {:cat :verb
                      :sem {:reflexive true
                            :pred :complain}
                      :subcat {:2 []}}}

 "consent" {:synsem {:cat :verb
                     :sem {:pred :consent}
                     :subcat {:2 {:cat :prep
                                  :sem {:pred :to}}}}}
 "conserve" {:synsem {:cat :verb
                      :sem {:pred :conserve}}}

 "consider" {:synsem {:cat :verb
                      :sem {:pred :consider}}}

 "continue" {:synsem {:cat :verb
                      :sem {:pred :continue}}}

 "convert" {:synsem {:cat :verb
                     :sem {:pred :convert}}}

 "correspond" {:share-sem :obj
               :synsem {:cat :verb
                        :sem {:pred :correspond}
                        :subcat {:2 {:cat :prep
                                     :sem {:pred :with}}}}}
 "count" {:synsem {:cat :verb
                   :sem {:pred :count}}}

 "create" {:synsem {:cat :verb
                    :sem {:pred :create}}}

 "cry" {:synsem {:cat :verb
                 :sem {:pred :cry}
                 :subcat {:2 []}}}

 "cut" {:english {:past {:english "cut"
                         :note "past tense"}
                  :participle "cutting"}
        :synsem {:cat :verb
                 :sem {:pred :cut}}}

 "damage" {:synsem {:cat :verb
                    :sem {:pred :damage}}}


 "dance" [{:synsem {:cat :verb
                    :sem {:pred :dance}
                    :subcat {:2 {:cat :prep
                                 :sem {:pred :with}}}}}
          {:synsem {:cat :verb
                    :sem {:pred :dance}
                    :subcat {:2 []}}}]

 "decide" {:synsem {:cat :verb
                    :sem {:pred :decide}}}

 "defend" {:synsem {:cat :verb
                    :sem {:pred :defend}}}

 "deny" {:synsem {:cat :verb
                  :sem {:pred :deny}}}

 "desire" {:synsem {:cat :verb
                    :sem {:pred :desire}}}

 "develop" {:synsem {:cat :verb
                     :sem {:pred :develop}}}

 "dictate" {:synsem {:cat :verb
                     :sem {:pred :dictate}}}

 "die" {:english {:past {:english "died"
                         :note "past tense"}
                  :participle "dying"}
        :synsem {:cat :verb
                 :sem {:pred :die}}}

 "dine" {:synsem {:cat :verb
                  :sem {:pred :cenare}
                  :subcat {:2 []}}}

 "disappear" [{:synsem {:cat :verb
                        :sem {:pred :disappear-sp}}}
              {:synsem {:cat :verb
                        :sem {:pred :disappear-sc}}}
              {:synsem {:cat :verb
                        :sem {:pred :disappear}}}]

 "displace" {:synsem {:cat :verb
                      :sem {:pred :displace}}}

 "divide" {:synsem {:cat :verb
                    :sem {:pred :divide}}}

 "draw" {:synsem {:cat :verb
                  :sem {:pred :draw}}
         :english {:past "drew"
                   :past-participle "drawn"}}

 "drink" {:synsem {:cat :verb
                   :sem {:pred :drink}}
          :english {:past "drank"
                    :past-participle "drunk"}}

 "drive" (let [common {:english {:past-participle "driven"
                                 :past "drove"}}]
           [{:unify [common]
             :synsem {:cat :verb
                      :sem {:pred :drive}}}
            {:unify [common]
             :synsem {:cat :verb
                      :sem {:pred :drive-c}}}])

 "disappoint" {:synsem {:cat :verb
                        :sem {:pred :disappoint}}}

 "do" {:synsem {:cat :verb
                :sem {:pred :do}}
       :english {:past "did"
                 :past-participle "done"
                 :present {:3sing "does"}}}
 "down" {:synsem {:cat :prep
                  :sem {:pred :down}
                  :subcat []}}

 "download" {:synsem {:cat :verb
                      :sem {:pred :download}}}

 "dog" {:synsem {:cat :noun
                 :sem {:pred :dog}}}

 "earn"  {:synsem {:cat :verb
                   :sem {:pred :earn}}}

 "eat" {:english {:past "ate"
                  :past-participle "eaten"}
        :synsem {:cat :verb
                 :sem {:pred :eat}}}

 ;; TODO: move this to "eat" with a subcat argument, a la phrasal verbs e.g. "putting on"
 "eat dinner" {:synsem {:cat :verb
                        :sem {:pred :have-dinner}
                        :subcat {:2 []}}
               :english {:present {:3sing "eats dinner"}
                         :participle "eating dinner"
                         :past-participle "eaten dinner"
                         :past "ate dinner"}}

 "embrace" {:synsem {:cat :verb
                     :sem {:pred :embrace}}}

 "endure" {:synsem {:cat :verb
                    :sem {:pred :endure}}}

 "engage" {:synsem {:cat :verb
                    :sem {:pred :engage}}}

 "enjoy" {:english {:present {:3sing "enjoys"}}
          :synsem {:cat :verb
                   :sem {:pred :enjoy}}}

 "enter"  {:synsem {:cat :verb
                    :sem {:pred :enter}}}

 "erase"  {:synsem {:cat :verb
                    :sem {:pred :erase}}}

 "escape" {:synsem {:cat :verb
                    :sem {:pred :escape}}}

 "espresso" {:synsem {:cat :noun
                      :sem {:pred :espresso}}}

 "exist" [{:synsem {:cat :verb
                    :sem {:pred :exist
                          :subj {:null true}}
                    :subcat {:2 []}}}
          {:synsem {:cat :verb
                    :sem {:pred :exist
                          :subj {:null false}}
                    :subcat {:2 []}}}]
 
 "exit" {:synsem {:cat :verb
                  :sem {:pred :exit}}}

 "expel" {:synsem {:cat :verb
                   :sem {:pred :expel}}}

 "explain" {:synsem {:cat :verb
                     :sem {:pred :explain}}}

 "express" {:synsem {:cat :verb
                     :sem {:pred :express}}}

 "faint" {:synsem {:cat :verb
                   :sem {:pred :faint}
                   :subcat {:2 []}}}

 "fall" {:transitivize false
         :synsem {:cat :verb
                  :sem {:pred :fall}}
         :english {:past "fell"}}

 "fall asleep"
 ;; TODO: move this to "fall" with a subcat argument, a la phrasal verbs e.g. "putting on"
 {:synsem {:cat :verb
           :sem {:pred :fall-asleep
                 :reflexive true}
           :subcat {:2 []}}
  :english {:participle "falling asleep"
            :present {:3sing "falls asleep"}
            :past-participle "fallen asleep"
            :past "fell asleep"}}

 "fall in love"
 {:synsem {:cat :verb
           :sem {:pred :fall-in-love
                 :reflexive true}
           :subcat {:2 []}}
  :english {:participle "falling in love"
            :present {:3sing "falls in love"}
            :past-participle "fallen in love"
            :past "fell in love"}}

 "father" {:synsem {:cat :noun
                    :agr {:gender :masc}
                    :sem {:pred :father}}}

 "fill" {:synsem {:cat :verb
                  :sem {:pred :fill}}}

 "find" {:synsem {:cat :verb
                  :sem {:pred :find}}
         :english {:past "found"}}

 "finish" {:synsem {:cat :verb
                    :sem {:pred :finish}}}

 "first" {:synsem {:cat :adjective
                   :sem {:pred :first}}}

 "fit" {:english {:past "fit"
                  :participle "fitting"}
        :synsem {:cat :verb
                 :sem {:pred :fit}}}

 "fold" {:synsem {:cat :verb
                  :sem {:pred :fold}}}

 "follow" {:synsem {:cat :verb
                    :sem {:pred :follow}}}

 "for" {:synsem {:cat :prep
                 :subcat {:1 {:cat :noun}}
                 :sem {:pred :for}}}

 "forget" {:synsem {:cat :verb
                    :sem {:pred :forget}}
           :english {:past "forgot"
                     :past-participle "forgotten"
                     :participle "forgetting"}}

 "form" {:synsem {:cat :verb
                  :sem {:pred :form}}}

 "furnish"  {:synsem {:cat :verb
                      :sem {:pred :furnish}}}

 "game" {:synsem {:cat :noun
                  :sem {:pred :game}}}

 ;; TODO: move all "get Xs" to "get" with a subcat argument,
 ;; à la phrasal verbs e.g. "putting on".
 "get angry"
 {:synsem {:cat :verb
           :sem {:pred :get-angry
                 :reflexive true}
           :subcat {:2 []}}
  :english {:participle "getting angry"
            :present {:3sing "gets angry"}
            :past-participle "gotten angry"
            :past "got angry"}}

 "get bored"
 {:synsem {:cat :verb
           :sem {:pred :get-bored
                 :reflexive true}
           :subcat {:2 []}}
  :english {:participle "getting bored"
            :past-participle "gotten bored"
            :present {:3sing "gets bored"}
            :past "got bored"}}

 "get dressed"
 {:synsem {:cat :verb
           :sem {:pred :get-dressed
                 :reflexive true}
           :subcat {:2 []}}
  :english {:participle "getting dressed"
            :past-participle "gotten dressed"
            :present {:3sing "gets dressed"}
            :past "got dressed"}}

 "get married"
 {:synsem {:cat :verb
           :sem {:pred :get-married
                 :reflexive true}
           :subcat {:2 []}}
  :english {:participle "getting married"
            :past-participle "gotten married"
            :present {:3sing "gets married"}
            :past "got married"}}

 "get off"
 {:synsem {:cat :verb
           :sem {:pred :get-off}
           :subcat {:2 []}}
  :english {:participle "getting off"
            :past-participle "gotten off"
            :present {:3sing "gets off"}
            :past "got off"}}
 "get on"
 {:synsem {:cat :verb
           :sem {:pred :get-on}
           :subcat {:2 []}}
  :english {:participle "getting on"
            :past-participle "gotten on"
            :present {:3sing "gets on"}
            :past "got on"}}
 "get ready"
 {:synsem {:cat :verb
           :sem {:pred :get-ready
                 :reflexive true}
           :subcat {:2 []}}
  :english {:participle "getting ready"
            :past-participle "gotten ready"
            :present {:3sing "gets ready"}
            :past "got ready"}}
 "get up"
 {:synsem {:cat :verb
           :sem {:pred :get-up
                 :reflexive true}
           :subcat {:2 []}}
  :english {:participle "getting up"
            :past-participle "gotten up"
            :present {:3sing "gets up"}
            :past "got up"}}

 "get used to"
 {:synsem {:cat :verb
           :sem {:pred :get-used-to
                 :reflexive true}
           :subcat {:2 []}}
  :english {:participle "getting used to"
            :past-participle "gotten used to"
            :present {:3sing "gets used to"}
            :past "got used to"}}

 "Gianluca"
 {:synsem {:agr {:number :sing
                 :person :3rd
                 :gender :masc}
           :sem {:pred :gianluca
                 :prop {:human true}}
           :propernoun true}}

 "Gianluca and Giovanni"
 {:synsem {:agr {:number :plur
                 :person :3rd
                 :gender :masc}
           :sem {:pred :gianluca-e-giovanni
                 :prop {:human true}}
           :propernoun true}}

 "Gianluca and Luisa"
 {:synsem {:agr {:number :plur
                 :person :3rd
                 :gender :masc}
           :sem {:pred :gianluca-e-luisa
                 :prop {:human true}}
           :propernoun true}}

 "Giovanni and I"
 [{:synsem {:cat :noun
            :pronoun true
            :case :nom
            :agr {:gender :masc
                  :person :1st
                  :number :plur}
            :sem {:prop {:human true}
                  :pred :giovanni-and-i}
            :subcat []}}]

 ;; TODO: account for "give" being ditransitive.
 "give" (let [common {:english {:past "gave"
                                :past-participle "given"}}]
          [{:unify [common]
            :synsem {:cat :verb
                     :sem {:pred :give}
                     :subcat {:3 []}}}

           ;; "give back"
           {:unify [common]
            :synsem {:cat :verb
                     :sem {:pred :give-back-return-ren}
                     :subcat {:3 {:cat :prep
                                  :sem {:pred :back}}}}}

           ;; "give X to Y" reflexive
           (let [obj (atom :top)
                 iobj (atom :top)]
             {:unify [common]
              :synsem {:cat :verb
                       :sem {:pred :give-x-to-y
                             :reflexive true
                             :obj obj
                             :iobj iobj}
                       :subcat {:2 {:cat :prep
                                    :sem {:pred :to
                                          :obj iobj}
                                    :subcat []}
                                :3 {:case :acc
                                    :cat :noun
                                    :pronoun true
                                    :reflexive true
                                    :sem obj
                                    :subcat []}}}})
           ;; "give Y X"
           (let [obj (atom :top)
                 iobj (atom :top)]
             {:unify [common]
              :synsem {:cat :verb
                       :sem {:pred :give-x-to-y
                             :obj obj
                             :iobj iobj}
                       :subcat {:2 {:case :acc
                                    :cat :noun
                                    :reflexive false
                                    :sem obj
                                    :subcat []}
                                :3 {:case :acc
                                    :cat :noun
                                    :sem iobj
                                    :subcat []}}}})

           ;; "give X to Y" nonreflexive
           (let [obj (atom :top)
                 iobj (atom :top)]
             {:unify [common]
              :synsem {:cat :verb
                       :sem {:pred :give-x-to-y
                             :reflexive false
                             :obj obj
                             :iobj iobj}
                       :subcat {:2 {:cat :prep
                                    :sem {:pred :to
                                          :obj iobj}
                                    :subcat []}
                                :3 {:case :acc
                                    :cat :noun
                                    :reflexive false
                                    :sem obj
                                    :subcat []}}}})])
 "go"
 {:synsem {:cat :verb
           :sem {:activity true
                 :discrete false
                 :pred :go}
           :subcat {:2 {:cat :prep}}}
  :english {:past "went"
            :past-participle "gone"}}

 ;; TODO: move all "go X"s to "go" with a subcat argument, a la phrasal verbs e.g. "putting on"
 "go around"
 {:synsem {:cat :verb
           :sem {:activity true
                 :discrete false
                 :pred :go-around}
           :subcat {:2 []}}
  :english {:past "went around"
            :participle "going around"
            :past-participle "gone around"
            :present {:3sing "goes around"}}}

 "go downstairs"
 {:synsem {:cat :verb
           :sem {:activity true
                 :discrete false
                 :pred :go-downstairs}
           :subcat {:2 []}}
  :english {:past "went downstairs"
            :participle "going downstairs"
            :past-participle "gone downstairs"
            :present {:3sing "goes downstairs"}}}

 "go out"
 {:synsem {:cat :verb
           :sem {:activity true
                 :discrete false
                 :pred :go-out}
           :subcat {:2 []}}
  :english {:past "went out"
            :participle "going out"
            :past-participle "gone out"
            :present {:3sing "goes out"}}}

 "go upstairs"
 {:synsem {:cat :verb
           :sem {:activity true
                 :discrete false
                 :pred :go-upstairs}
           :subcat {:2 []}}
  :english {:past "went upstairs"
            :participle "going upstairs"
            :past-participle "gone upstairs"
            :present {:3sing "goes upstairs"}}}

 "grab"  {:synsem {:cat :verb
                   :sem {:pred :grab}}
          :english {:participle "grabbing"
                    :past "grabbed"}}

 "guess" {:synsem {:cat :verb
                   :sem {:pred :guess}}}

 ;; TODO: add auxiliary sense of "have"
 "have" [;; possessive
         {:synsem {:cat :verb
                   :subcat {:2 {:cat :noun}}
                   :sem {:activity false
                         :discrete false
                         :pred :have}}
          :english {:present {:3sing "has"}
                    :past "had"}}

         ;; modal: "have to + VP"
         ;; TODO: if used without infinitive VP, conjugates as "have" but should be "have to".
         {
          :synsem {:aux true
                   :cat :verb
                   :subcat {:2 {:cat :verb
                                :infl :infinitive}}}
          :english {:present {:3sing "has"}
                    :past "had"}
          :modal-with :infinitive}]

 ;; TODO: move all "have X"s to "have" with a subcat argument, a la phrasal verbs e.g. "putting on"
 "have dinner" {:synsem {:cat :verb
                         :sem {:pred :have-dinner}
                         :subcat {:2 []}}
                :english {:present {:3sing "has dinner"}
                          :past "had dinner"
                          :participle "having dinner"}}
 "have fun"
 {:synsem {:cat :verb
           :sem {:pred :have-fun
                 :reflexive true}
           :subcat {:1 :top
                    :2 []}}
  :english {:participle "having fun"
            :present {:3sing "has fun"}
            :past "had fun"}}

 "have lunch" {:synsem {:cat :verb
                        :sem {:pred :have-lunch}
                        :subcat {:2 []}}
               :english {:present {:3sing "has lunch"}
                         :past "had lunch"
                         :participle "having lunch"}}

 "he" {:synsem {:cat :noun
                :pronoun true
                :case :nom
                :agr {:person :3rd
                      :gender :masc
                      :gendered true
                      :number :sing}
                :sem {:prop {:human true}
                      :pred :lui}
                :subcat []}}

 "hear" {:synsem {:cat :verb
                  :sem {:pred :hear}}
         :english {:past "heard"}}

 "help"
 {:synsem {:cat :verb
           :sem {:pred :help}
           :subcat {:1 {:cat :noun}
                    :2 {:cat :noun}}}}
 "her"
 [{:synsem {:cat :det
            :agr {:number :sing}
            :sem {:of {:pred :lei}}
            :def :possessive}}
  {:synsem {:cat :det
            :agr {:number :plur}
            :sem {:of {:pred :lei}}
            :def :possessive}}
  {:synsem {:cat :noun
            :pronoun true
            :case :acc
            :reflexive false
            :agr {:person :3rd
                  :gender :fem
                  :number :sing}
            :sem {:pred :lei
                  :prop {:human true}}
            :subcat []}}]

 "herself" {:synsem {:cat :noun
                     :pronoun true
                     :case :acc
                     :reflexive true
                     :agr {:person :3rd
                           :gender :fem
                           :number :sing}
                     :sem {:prop {:human true}}
                     :subcat []}}
 "him" {:synsem {:cat :noun
                 :pronoun true
                 :case :acc
                 :reflexive false
                 :agr {:person :3rd
                       :gender :masc
                       :number :sing}
                 :sem {:prop {:human true}
                       :pred :lui}
                 :subcat []}}

 "himself" {:synsem {:cat :noun
                     :pronoun true
                     :case :acc
                     :reflexive true
                     :agr {:person :3rd
                           :gender :masc
                           :number :sing}
                     :sem {:prop {:human true}}
                     :subcat []}}

 "his" [{:synsem {:cat :det
                  :agr {:number :sing}
                  :sem {:of {:pred :lui}}
                  :def :possessive}}
        {:synsem {:cat :det
                  :agr {:number :plur}
                  :sem {:of {:pred :lui}}
                  :def :possessive}}]

 "hit" {:english {:past {:english "hit"
                         :note "past tense"}
                  :participle "hitting"
                  :past-participle "hit"}
        :synsem {:cat :verb
                 :sem {:pred :hit}}}

 "hold"
 {:synsem {:cat :verb
           :sem {:pred :hold}}
  :english {:past "held"}}

 "hope" (let [common {:synsem {:cat :verb
                               :subcat {:1 {:cat :noun}}}}]
          [{:unify [common]
            :synsem {:sem {:pred :hope}
                     :subcat {:2 []}}} ;; intransitive
           (let [obj (atom {:top :top})]
             {:unify [common]
              :synsem {:sem {:pred :hope
                             :obj obj}
                       :subcat {:2 {:cat :comp  ;; transitive: "hope that .."
                                    :sem {:obj obj}
                                    :comp-type :that
                                    :subcat []}
                                :3 []}}})])
 "house" {:synsem {:cat :noun
                   :sem {:pred :house}}}
 "hug"
 {:synsem {:cat :verb
           :sem {:pred :hug}}
  :english {:past "hugged"
            :participle "hugging"}}

 "hurt" (let [common {:english {:past "hurt"}
                      :synsem {:cat :verb}}]
          ;; 1. reflexive sense of "hurt"
          [{:unify [common]
            :synsem {:sem {:pred :hurt-oneself
                           :reflexive true}}}

           ;; 2. transitive sense of "hurt"
           {:unify [common]
            :synsem {:sem {:pred :hurt
                           ;; TODO: consider making lexicon post-processing rule:
                           ;; if not(reflexive=true) => reflexive=false
                           :reflexive false
                           :obj {:animate true}}}}])

 "Jean" {:synsem {:sem {:pred :Jean
                        :prop {:human true}}
                  :propernoun true
                  :agr {:number :sing
                        :person :3rd
                        :gender :masc}}}

 "Juan" {:synsem {:sem {:pred :Juan
                        :prop {:human true}}
                  :propernoun true
                  :agr {:number :sing
                        :person :3rd
                        :gender :masc}}}
 "Juana" {:synsem {:sem {:pred :Juana
                         :prop {:human true}}
                   :propernoun true
                   :agr {:number :sing
                         :person :3rd
                         :gender :fem}}}
 "Juan and I"
 [{:synsem {:cat :noun
            :pronoun true
            :case :nom
            :agr {:gender :masc
                  :person :1st
                  :number :plur}
            :sem {:prop {:human true}
                  :pred :Juan-and-i}
            :subcat []}}]

 "Juan and me"
 [{:synsem {:cat :noun
            :pronoun true
            :case :acc
            :reflexive false
            :agr {:gender :masc
                  :person :1st
                  :number :plur}
            :sem {:prop {:human true}
                  :pred :Juan-and-i}
            :subcat []}}]
 "I"
 {:synsem {:cat :noun
           :pronoun true
           :case :nom
           :agr {:person :1st
                 :number :sing}
           :sem {:prop {:human true}
                 :pred :I}
           :subcat []}}

 "if"   (let [obj (atom :top)]
          {:synsem {:cat :comp
                    :comp-type :if
                    :sem {:if obj
                          :pred :unspec}
                    ;; {:pred :unspec} is to prevent unexpected
                    ;; use of this lexeme with specifications that
                    ;; as for a given {:pred}.

                    :subcat {:1 {:cat :verb
                                 :sem obj
                                 :subcat []}
                             :2 []}}})

 "imagine" {:synsem {:cat :verb
                     :sem {:pred :imagine}}}

 "import" {:synsem {:cat :verb
                    :sem {:pred :import}}}

 "improve" {:synsem {:cat :verb
                     :sem {:pred :improve}}}

 "in front of" {:synsem {:cat :prep
                         :sem {:pred :in-front-of
                               :obj {:furniture true}}}}

 "increase" {:synsem {:cat :verb
                      :sem {:pred :increase}}}

 "inform" {:synsem {:cat :verb
                    :sem {:pred :inform}}}
 
 "insist" {:synsem {:cat :verb
                    :sem {:pred :insist}}}

 "insure" {:synsem {:cat :verb
                    :sem {:pred :insure}}}

 "intelligent" {:synsem {:cat :adjective
                         :sem {:pred :intelligent
                               :subj {:prop {:human true}}}}}

 "interrupt" {:synsem {:cat :verb
                       :sem {:pred :interrupt}}}

 "introduce" [{:synsem {:cat :verb
                        :sem {:pred :introduce}}}

              {:english {:note "p-"}
               :synsem  {:cat :verb
                         :sem {:pred :introduce-p}}}]

 "it"
 [{:synsem {:cat :noun
            :pronoun true
            :case :top ;; we could just omit this kv, but we explicitly
            ;; set it to :top to show how it's different than other
            ;; pronouns: like 'you' the nominative and accusative
            ;; are the same (compare versus 'I'/'me', 'she'/'her', etc)
            :agr {:person :3rd
                  :number :sing}
            :reflexive false
            :sem {:pred :lui
                  :prop {:human false}}
            :subcat []}}
  {:synsem {:cat :noun
            :pronoun true
            :case :top ;; we could just omit this kv, but we explicitly
            ;; set it to :top to show how it's different than other
            ;; pronouns: like 'you' the nominative and accusative
            ;; are the same (compare versus 'I'/'me', 'she'/'her', etc)
            :agr {:person :3rd
                  :number :sing}
            :reflexive false
            :sem {:pred :lei
                  :prop {:human false}}
            :subcat []}}]
 "itself"
 {:synsem {:cat :noun
           :pronoun true
           :case :acc
           :reflexive true
           :agr {:person :3rd
                 :number :sing}
           :sem {:prop {:human false}}
           :subcat []}}
 "keep"
 [{:synsem {:cat :verb
            :sem {:pred :keep}}
   :english {:past "kept"}}
  {:synsem {:cat :verb
            :sem {:pred :keep-safe}}
   :english {:note "something safe"
             :past "kept"}}]

 "key" {:synsem {:cat :noun
                 :sem {:pred :key
                       :artifact true
                       :legible false
                       :speakable false}}}

 "kill" {:synsem {:cat :verb
                  :sem {:pred :kill}}}

 "know" (let [common
              {:english {:past "knew"
                         :past-participle "known"}}]
          [{:unify [common]
            :english {:note "c..."}
            :synsem {:cat :verb
                     :sem {:pred :know-c}}}
           {:unify [common]
            :english {:note "s..."}
            :synsem {:cat :verb
                     :sem {:pred :know-s}}}])

 "lead" {:synsem {:cat :verb
                  :sem {:pred :lead}}
         :english {:past "led"}}

 "learn" [{:synsem {:cat :verb
                    :sem {:pred :learn}}}

          {:english {:note "a-"}
           :synsem  {:cat :verb
                     :sem {:pred :learn-a}}}

          {:english {:note "i-"}
           :synsem  {:cat :verb
                     :sem {:pred :learn-i}}}]

 "leave" [{:english {:note "behind"
                     :past "left"}
           :synsem {:cat :verb
                    :sem {:pred :leave-behind}}}

          {:english {:note "on a trip"
                     :past "left"}
           :synsem {:cat :verb
                    :sem {:pred :leave-trip}}}]

 "lend" {:synsem {:cat :verb
                  :sem {:pred :lend}}
         :english {:past "lent"}}

 "lie" {:synsem {:cat :verb
                 :sem {:pred :lie}
                 :subcat {:2 {:cat :prep
                              :sem {:pred :to}}}}}

 "lift" {:synsem {:cat :verb
                  :sem {:pred :lift}}}

 "light" [{:synsem {:cat :verb
                    :sem {:pred :light}}}
          {:synsem {:cat :noun
                    :sem {:pred :light
                          :prop {:artifact true}}}}]

 "listen to" {:synsem {:cat :verb
                       :sem {:pred :listen-to}}
              :english {:participle "listening to"
                        :past "listened to"
                        :present {:3sing "listens to"}}}

 "live" [{:synsem {:cat :verb
                   :sem {:pred :live-a}}
          :english {:note "a-"}}
         {:synsem {:cat :verb
                   :sem {:pred :live-v}}
          :english {:note "v-"}}]

 "look at" {:synsem {:cat :verb
                     :sem {:pred :look-at}}
            :english {:participle "looking at"
                      :past "looked at"
                      :present {:3sing "looks at"}}}

 ;; TODO: combine all "look X" into "look" with different subcategorizations
 "look for" {:synsem {:cat :verb
                      :sem {:pred :look-for}}
             :english {:participle "looking for"
                       :past "looked for"
                       :present {:3sing "looks for"}}}

 "look up" {:synsem {:cat :verb
                     :sem {:pred :look-up}}
            :english {:participle "looking up"
                      :past "looked up"
                      :present {:3sing "looks up"}}}

 "lose" {:english {:participle "losing"
                   :past "lost"}
         :synsem {:cat :verb
                  :sem {:pred :lose}}}

 "love" {:synsem {:cat :verb
                  :sem {:pred :amare}}}

 "lower" {:synsem {:cat :verb
                   :sem {:pred :lower}}}

 "Lucia and Cecilia"
 {:synsem {:sem {:pred :lucia-and-cecilia
                 :prop {:human true}}
           :propernoun true
           :agr {:number :plur
                 :person :3rd
                 :gender :fem}}}

 "Luigi"
 {:synsem {:sem {:pred :luigi
                 :prop {:human true}}
           :propernoun true
           :agr {:number :sing
                 :gender :masc}}}
 "Luisa"
 {:synsem {:sem {:pred :luisa
                 :prop {:human true}}
           :agr {:number :sing
                 :gender :fem}
           :propernoun true}}

 "Luisa and I"
 {:synsem {:cat :noun
           :pronoun true
           :case :nom
           :agr {:gender :top
                 :person :1st
                 :number :plur}
           :sem {:prop {:human true}
                 :pred :luisa-and-i}
           :subcat []}}

 "make" {:synsem {:cat :verb
                  :sem {:pred :make}}
         :english {:past "made"}}

 "man" {:english {:plur "men"}
        :synsem {:agr {:gender :masc}
                 :cat :noun
                 :sem {:pred :man}}}

 "manage" {:synsem {:cat :verb
                    :sem {:pred :manage}}}
 "Marina"
 {:synsem {:agr {:number :sing
                 :gender :fem}
           :sem {:pred :marina
                 :prop {:human true}}
           :propernoun true}}
 "Mario"
 {:synsem {:agr {:number :sing
                 :gender :masc}
           :sem {:pred :mario
                 :prop {:human true}}
           :propernoun true}}
 "Matteo"
 {:synsem {:agr {:number :sing
                 :gender :masc}
           :sem {:pred :matteo
                 :prop {:human true}}
           :propernoun true}}

 "may" {:english {:past "might"
                  :past-participle "been able to"
                  :participle "able to"
                  :present {:1sing "may"
                            :2sing "may"
                            :3sing "may"
                            :1plur "may"
                            :2plur "may"
                            :3plur "may"}
                  :future "be able to"
                  :imperfect "be able to"
                  :conditional "be able to"}
        :modal-with :root
        :synsem {:cat :verb
                 :sem {:pred :may}}}

 "me" {:synsem {:cat :noun
                :pronoun true
                :case :acc
                :reflexive false
                :agr {:person :1st
                      :number :sing}
                :sem {:prop {:human true}
                      :pred :I}
                :subcat []}}

 "measure" {:synsem {:cat :verb
                     :sem {:pred :measure}}}

 "meet"  {:synsem {:cat :verb
                   :sem {:pred :meet}}
          :english {:past "met"
                    :past-participle "met"}}

 "meeting" {:synsem {:cat :noun
                     :sem {:pred :meeting
                           :event true}}}

 "mother" {:synsem {:agr {:gender :fem}
                    :cat :noun
                    :sem {:prop {:human true
                                 :child false}
                          :pred :mother}}}

 "move" {:synsem {:cat :verb
                  :sem {:pred :move}}}

 "multiply" {:synsem {:cat :verb
                      :sem {:pred :multiply}}}

 ;; TODO: should not need to provide an irregular plural form
 ;; [:sem :mass]=true should be sufficient.
 "music" {:synsem {:agr {:number :sing}
                   :cat :noun
                   :sem {:pred :music}}}

 "must" {:english {:participle "having to"
                   :present-progressive :avoid
                   :past "had to"
                   :past-participle "had to"
                   :imperfect {:1sing "used to have to"
                               :2sing "used to have to"
                               :3sing "used to have to"
                               :1plur "used to have to"
                               :2plur "used to have to"
                               :3plur "used to have to"}
                   :present {:3sing "must"}
                   :future "have to"
                   :conditional "have to"}
         :modal-with :root
         :synsem {:cat :verb
                  :sem {:pred :have-to}}}
 "my"
 {:synsem {:cat :det
           :def :possessive
           :sem {:of {:pred :I}}}}

 "myself"
 {:synsem {:cat :noun
           :pronoun true
           :case :acc
           :reflexive true
           :agr {:person :1st
                 :number :sing}
           :sem {:prop {:human true}
                 :pred :I}
           :subcat []}}
 "name"
 (let [gender (atom :top)
       number (atom :top)
       agr (atom {:gender gender
                  :number number})
       of (atom {:gender gender
                 :number number})]
   {:synsem {:agr agr
             :cat :noun
             :sem {:pred :name
                   :mod []
                   :subj of}
             :subcat {:1 {:agr agr
                          :cat :det
                          :def :possessive
                          :sem {:of of}}}}})

 "need" {:synsem {:cat :verb
                  :sem {:pred :need}}}

 "new" {:synsem {:cat :adjective
                 :sem {:pred :new
                       :subj {:physical-object true}}}}

 "note" [{:synsem {:cat :verb
                   :sem {:pred :note}}}
         {:synsem {:cat :noun
                   :sem {:pred :note}}}]

 "observe" {:synsem {:cat :verb
                     :sem {:pred :observe}}}

 "obtain" {:synsem {:cat :verb
                    :sem {:pred :obtain}}}

 "off" {:synsem {:cat :prep
                 :sem {:pred :off}
                 :subcat []}}

 "open" {:synsem {:cat :verb
                  :sem {:pred :open}}}

 "old" {:synsem {:cat :adjective
                 :sem {:pred :old
                       :subj {:physical-object true}}}}

 "on" {:synsem {:cat :prep
                :sem {:pred :on}
                :subcat []}}

 "organize" {:synsem {:cat :verb
                      :sem {:pred :organize}}}

 "organize systematically"
 {:synsem {:cat :verb
           :sem {:activity true
                 :discrete false
                 :pred :organize-systematically}
           :subcat {:2 []}}
  :english {:past "organized systematically"
            :participle "organizing systematically"
            :present {:3sing "organizes systematically"}}}

 "our"
 {:synsem {:cat :det
           :agr {:gender :masc}
           :sem {:of {:pred :noi}}
           :def :possessive}}

 "ourselves"
 {:synsem {:cat :noun
           :pronoun true
           :case :acc
           :reflexive true
           :agr {:person :1st
                 :number :plur}
           :sem {:prop {:human true}}
           ;; TODO: remove: should be derived from
           ;; :pronoun=true.
           :subcat []}}

 "paint"  {:synsem {:cat :verb
                    :sem {:pred :paint}}}

 "participate"  {:synsem {:cat :verb
                          :sem {:pred :participate}
                          :subcat {:2 []}}}

 "pass" {:synsem {:cat :verb
                  :sem {:pred :pass}}}

 "party" [{:synsem {:cat :noun
                    :sem {:pred :party
                          :place true}}}
          {:synsem {:cat :noun
                    :sem {:pred :party
                          :event true}}}]

 "pay" {:synsem {:cat :verb
                 :sem {:pred :pay}}
        :english {:past "paid"}}

 "pizza"
 {:synsem {:cat :noun
           :sem {:pred :pizza}}}

 ;; TODO: 3sing present exception used below to avoid "playies" is not an exception: it's a rule: y->ys.
 ;; the exceptional case is when "ys" is not used (e.g. "tries").
 "play" [{:comment "We are talking about playing games or sports."
          :english {:note "⚽" :printer-note "games"}
          :synsem {:cat :verb
                   :sem {:pred :play-games}}}

         {:comment "We are talking about playing music or sounds."
          :english {:note "🎼" :printer-note "music"}
          :synsem {:cat :verb
                   :sem {:pred :play-music}}}]

 "praise" {:synsem {:cat :verb
                    :sem {:pred :praise}}}

 "prefer" {:english {:past "preferred"
                     :past-participle "preferred"
                     :participle "preferring"}
           :synsem {:cat :verb
                    :sem {:pred :prefer}}}


 "prepare" [{:synsem {:cat :verb
                      :sem {:pred :get-ready
                            :reflexive true}}}
            {:synsem {:cat :verb
                      :sem {:pred :prepare}}}]

 "present" {:synsem {:cat :verb
                     :sem {:pred :present}}}

 "preserve" {:synsem {:cat :verb
                      :sem {:pred :preserve}}}

 "print"  {:synsem {:cat :verb
                    :sem {:pred :print}}}

 "professor" {:synsem {:agr :top
                       :cat :noun
                       :sem {:prop {:human true}
                             :pred :professor}}}

 "pupil" {:synsem {:agr :top
                   :cat :noun
                   :sem {:prop {:human true}
                         ;; example of a synonym, where we use the convention of making the
                         ;; :pred (i.e. :student) the more common case (c.f. "student")
                         :pred :student}}}

 "punish" {:synsem {:cat :verb
                    :sem {:pred :punish}}}

 "put"
 (let [common {:synsem {:cat :verb}
               :english {:participle "putting"
                         :past {:english "put"
                                :note "past tense"}}}]
   [{:unify [common]
     :synsem {:sem {:pred :put}}}

    {:unify [common]
     :phrasal-verb true
     :synsem {:sem {:pred :insult}
              :subcat {:2 {:cat :prep
                           :sem {:pred :down}}}}}
    {:unify [common]
     :phrasal-verb true
     :synsem {:sem {:pred :delay}
              :subcat {:2 {:cat :prep
                           :sem {:pred :off}}}}}
    ;; "put the shoes on"
    {:unify [common]
     :phrasal-verb true
     :synsem {:sem {:pred :put-on}
              :subcat {:2 {:cat :prep
                           :sem {:pred :on}}}}}

    ;; "put on the shoes"
    {:unify [common]
     :phrasal-verb true
     :synsem {:sem {:pred :put-on}
              :subcat {:3 {:cat :prep
                           :sem {:pred :on}}}}}

    {:unify [common]
     :phrasal-verb true
     :synsem {:sem {:pred :tolerate}
              :subcat {:2 {:cat :prep
                           :sem {:pred :up-with}}}}}

    (let [subject-semantics (atom :top)
          subject-agr (atom :top)]
      {:unify [common]
       :synsem {:sem {:pred :put-oneself
                      :reflexive true
                      :subj subject-semantics
                      :obj subject-semantics}
                :subcat {:1 {:agr subject-agr
                             :sem subject-semantics}
                         :2 {:agr subject-agr
                             :pronoun true
                             :reflexive true
                             :sem subject-semantics}}}})
    {:unify [common]
     :synsem {:sem {:pred :put
                    :subcat {:2 []}}}}])

 "radio" {:synsem {:cat :noun
                   :sem {:pred :radio}}}

 "read" ;; if this was a phonetic dictionary, there would be two
 ;; entries for each pronounciation - one pronounced as
 ;; like the word "reed" and one pronounced like the word "red".
 {:english {:past {:english "read"
                   :note "past tense"}}
  :synsem {:cat :verb
           :sem {:pred :read
                 :discrete false}}}

 "receive"  {:synsem {:cat :verb
                      :sem {:pred :receive}}}

 "reciprocate" {:synsem {:cat :verb
                         :sem {:pred :reciprocate}}}

 "recognize" {:synsem {:cat :verb
                       :sem {:pred :recognize}}}

 "recount" {:synsem {:cat :verb
                     :sem {:pred :recount}}}

 "recover" {:synsem {:cat :verb
                     :sem {:pred :recover}}}
 "red"
 {:synsem {:cat :adjective
           :sem {:pred :red
                 :prop {:physical-object true
                        :human false}}}}

 "remain" [{:synsem {:cat :verb
                     :subcat {:2 {:cat :prep
                                  :sem {:pred :with}}}
                     :sem {:pred :remain}}} ;; for other than italian

           ;; these two below are for Italian.
           {:english {:note "ri-"}
            :synsem {:cat :verb
                     :sem {:pred :remain-ri}
                     :subcat {:2 {:cat :prep
                                  :sem {:pred :with}}}}}
           {:english {:note "re-"}
            :synsem {:cat :verb
                     :sem {:pred :remain-re}
                     :subcat {:2 {:cat :prep
                                  :sem {:pred :with}}}}}]

 "remember"  {:synsem {:cat :verb
                       :sem {:pred :remember}}}

 "remove" {:synsem {:cat :verb
                    :sem {:pred :remove}}}

 "render" {:synsem {:cat :verb
                    :sem {:pred :render}}}

 "repeat"  {:synsem {:cat :verb
                     :sem {:pred :repeat}}}

 "repair" {:synsem {:cat :verb
                    :sem {:pred :repair}}}

 "reserve" {:synsem {:cat :verb
                     :sem {:pred :reserve}}}

 "respond"  {:share-sem :obj
             :synsem {:cat :verb
                      :sem {:pred :answer}
                      :subcat {:2 {:cat :prep
                                   :sem {:pred :to}}}}}
 "rest" [{:synsem {:cat :verb
                   :subcat {:2 []}
                   :sem {:pred :rest-oneself
                         :reflexive true}}}

         {:synsem {:cat :verb
                   :subcat {:2 []}
                   :sem {:pred :rest}}}]

 "return" [{:synsem {:cat :verb
                     :sem {:pred :return-r}}
            :english {:note "r-"}}
           {:synsem {:cat :verb
                     :sem {:pred :return-t}}
            :english {:note "t-"}}

           ;; TODO: add obligitory direct object for this sense:
           {:synsem {:cat :verb
                     :sem {:pred :give-back-return-res}}}

           ;; TODO: add obligitory direct object for this sense:
           {:synsem {:cat :verb
                     :sem {:pred :give-back-return-ren}}}]

 "ruin" {:synsem {:cat :verb
                  :sem {:pred :ruin}}}


 "run" {:english {:past "ran"
                  :participle "running"
                  :past-participle "run"}
        :synsem {:cat :verb
                 :sem {:pred :run}
                 :subcat {:2 []}}}

 ;; TODO: probably only need one of these entries: remove the {:number :sing|:plur}.
 "s" [(let [of (atom :top)]
        {:synsem {:agr {:number :sing}
                  :cat :det
                  :def :possessive
                  :subcat {:1 {:cat :noun
                               :pronoun false
                               :sem of
                               :subcat []}}
                  :sem {:pred :of
                        :of of}}})
      (let [of (atom :top)]
        {:synsem {:agr {:number :plur}
                  :cat :det
                  :def :possessive
                  :sem {:pred :of
                        :of of}
                  :subcat {:1 {:cat :noun
                               :pronoun false
                               :sem of
                               :subcat []}}}})]

 "salad" {:synsem {:cat :noun
                   :sem {:pred :salad}}}

 "say" {:english {:past "said"}
        :synsem {:cat :verb
                 :sem {:pred :say}}}

 "scold" {:synsem {:cat :verb
                   :sem {:pred :scold}}}

 ;; TODO: search _within_ or _on_: depends on the object.
 ;;   "search"  {:synsem {:sem {:pred :cercare}}})

 "scrub"  {:synsem {:cat :verb
                    :sem {:pred :scrub}}
           :english {:participle "scrubbing"
                     :past "scrubbed"}}

 "second" {:synsem {:cat :adjective
                    :sem {:pred :second}}}

 "see" (let [common {:english {:past "saw"
                               :past-participle "seen"
                               ;; TODO: should be a morphological
                               ;; generalization, not a lexical exception.
                               ;; e.g. "flee" => "fleeing"
                               :participle "seeing"}}]
         [{:unify [common]
           :synsem {:cat :verb
                    :sem {:pred :see
                          :reflexive false}
                    :subcat {:1 {:cat :noun
                                 :sem {:animate true}}
                             :2 {:cat :noun
                                 :reflexive false
                                 :sem {:physical-object true}}}}}
          (let [obj (atom {:animate true
                           :physical-object true})
                agr (atom :top)]
            {:unify [common]
             :synsem {:cat :verb
                      :sem {:pred :see
                            :reflexive true}
                      :subcat {:1 {:cat :noun
                                   :agr agr
                                   :sem obj}
                               :2 {:cat :noun
                                   :pronoun true
                                   :agr agr
                                   :sem obj
                                   :reflexive true}}}})])

 "seem"  {:synsem {:cat :verb
                   :sem {:pred :seem}}}

 "sell" {:synsem {:cat :verb
                  :sem {:pred :sell}}
         :english {:past "sold"}}

 "send" (let [common {:english {:past "sent"
                                :past-participle "sent"}}]
          [{:unify [common]
            :synsem {:cat :verb
                     :sem {:pred :send}}}
           
           {:unify [common]
            :english {:note "m-"}
            :synsem  {:cat :verb
                      :sem {:pred :send-m}}}
           
           {:unify [common]
            :english {:note "s-"}
            :synsem  {:cat :verb
                      :sem {:pred :send-s}}}])

 "set" {:synsem {:cat :verb
                 :sem {:pred :set}}
        :english {:past {:english "set"
                         :participle "setting"
                         :note "past tense"}}}

 "share" {:synsem {:cat :verb
                   :sem {:pred :share}}}

 "shave" [;; 1. reflexive sense
          {:synsem {:cat :verb
                    :sem {:pred :shave
                          :reflexive true}}}
                                        ; ;2. non-reflexive sense
          {:synsem {:cat :verg
                    :sem {:pred :shave}}}]
 "she"
 {:synsem {:cat :noun
           :pronoun true
           :case :nom
           :agr {:person :3rd
                 :gender :fem
                 :gendered true
                 :number :sing}
           :sem {:prop {:human true}
                 :pred :lei}
           :subcat []}}

 "shoe" {:synsem {:cat :noun
                  :sem {:pred :shoe}}}
 "short"
 [{:synsem {:cat :adjective
            :sem {:pred :short
                  :subj {:physical-object true}}}}

  {:synsem {:cat :adjective
            :sem {:pred :short
                  :subj {:event true}}}}]

 "show" [{:synsem {:cat :verb
                   :sem {:pred :show}}
          :english {:past-participle "shown"}}
         {:synsem {:cat :verb
                   :sem {:pred :show-m}}
          :english {:past-participle "shown"
                    :note "m"}}
         {:synsem {:cat :verb
                   :sem {:pred :show-e}}
          :english {:past-participle "shown"
                    :note "e"}}]

 "sigh" [{:synsem {:cat :verb
                   :sem {:pred :sigh}
                   :subcat {:2 {:sem {:pred :sigh}}}}}
         {:synsem {:cat :noun
                   :sem {:pred :sigh}}}]

 "sign" {:synsem {:cat :verb
                  :sem {:pred :sign}}}

 "sing" {:synsem {:cat :verb
                  :sem {:pred :sing}}
         :english {:past "sang"
                   :past-participle "sung"}}

 "sit down" {:english {:past "sat down"
                       :participle "sitting down"
                       :past-participle "sat down"
                       :present {:3sing "sits down"}}
             :synsem {:cat :verb
                      :sem {:pred :sit-down
                            :reflexive true}
                      :subcat {:2 []}}}

 "sleep" {:synsem {:cat :verb
                   :sem {:pred :sleep}
                   :subcat {:2 []}}
          :english {:past "slept"}}
 "small"
 {:synsem {:cat :adjective
           :sem {:pred :small}}}

 "snap" {:synsem {:cat :verb
                  :sem {:pred :snap-pictures}
                  :subcat {:2 {:sem {:pred :picture}}}}
         :english {:past "snapped"
                   :participle "snapping"
                   :note "pictures"}}

 ;; TODO: squash this into one entry: remove {:agr :number}; don't
 ;; need it.
 "some"
 [{:synsem {:cat :det
            :def :partitivo
            :sem {:pred :some-of
                  :of {:pred nil}}
            :agr {:number :plur}}}
  {:synsem {:cat :det
            :def :indef
            :sem {:pred :some-one-of
                  :of {:pred nil}}
            :agr {:number :sing}}}]

 "smoke" {:synsem {:cat :verb
                   :sem {:pred :smoke}}}
 "speak"
 {:english {:past "spoke"
            :past-participle "spoken"}
  :synsem {:cat :verb
           :sem {:pred :speak}}}

 "spell" {:synsem {:cat :verb
                   :sem {:pred :spell}}}

 "spend" {:synsem {:cat :verb
                   :sem {:pred :spend}}
          :english {:past "spent"
                    :past-participle "spent"}}

 "spread food" {:synsem {:cat :verb
                         :sem {:pred :spread-food}
                         :subcat {:2 []}};; intransitive.
                :english {:past "spreaded food"
                          :participle "spreading food"
                          :past-particple "spreaded food"}}

 "start" {:synsem {:cat :verb
                   :sem {:pred :start}}}

 "stay" {:synsem {:cat :verb
                  :sem {:pred :stay}
                  :subcat {:2 {:cat :prep
                               :sem {:pred :at}}}}}
 "stain" {:synsem {:cat :verb
                   :sem {:pred :stain}}}

 "steal" {:synsem {:cat :verb
                   :sem {:pred :steal}}
          :english {:past "stole"
                    :past-participle "stolen"}}

 "stop" (let [common {:english {:participle "stopping"
                                :past "stopped"}
                      :synsem {:cat :verb}}]
          ;; 1. reflexive sense of "stop"
          [(let [subject-semantics (atom :top)
                 subject-agr (atom :top)]
             {:unify [common]
              :synsem {:sem {:pred :stop-oneself
                             :reflexive true
                             :subj subject-semantics
                             :obj subject-semantics}
                       :subcat {:1 {:agr subject-agr
                                    :sem subject-semantics}
                                :2 {:agr subject-agr
                                    :pronoun true
                                    :reflexive true
                                    :sem subject-semantics}}}})
           ;; 2. intransitive sense of "stop"
           {:unify [common]
            :synsem {:sem {:pred :stop
                           :subcat {:2 []}}}}])

 "strike" {:english {:past "struck"}
           :synsem {:cat :verb
                    :sem {:pred :strike}}}

 "student" {:synsem {:agr :top
                     :cat :noun
                     :sem {:prop {:human true}
                           :pred :student}}}

 "study"  {:synsem {:cat :verb
                    :sem {:pred :study}}
           :english {:past "studied"}}

 "stupid" {:synsem {:cat :adjective
                    :sem {:pred :stupid
                          :subj {:prop {:human true}}}}}

 "succeed"  {:synsem {:cat :verb
                      :sem {:pred :succeed}}}

 "supply" {:synsem {:cat :verb
                    :sem {:pred :supply}}}

 "support" {:synsem {:cat :verb
                     :sem {:pred :support}}}

 "swim" {:synsem {:cat :verb
                  :sem {:pred :swim}}
         :english {:past "swam"
                   :past-participle "swum"
                   :participle "swimming"}}

 "table" {:synsem {:cat :noun
                   :sem {:pred :table}}}

 "take" (let [common {:synsem {:cat :verb}
                      :english {:past "took"
                                :past-participle "taken"}}]
          [{:unify [common]
            :synsem {:sem {:pred :grab}}
            :english {:note "grab"}}
           {:unify [common]
            :synsem {:sem {:pred :take}}}])

 "take advantage of" {:english {:past "took advantage of"
                                :participle "taking advantage of"
                                :past-participle "taken advantage of"
                                :present {:3sing "takes advantage of"}}
                      :synsem {:cat :verb
                               :sem {:pred :take-advantage-of}}}
 "talk"
 (let [common {:synsem {:cat :verb
                        :sem {:pred :talk}}}]
   (let [talk-to (atom :top)]
     {:unify [common]
      :synsem {:subcat {:2 {:cat :prep
                            :sem {:pred :to
                                  :obj talk-to}}}
               :sem {:iobj talk-to}}})
   
   {:unify [common]
    :synsem {:subcat {:2 []}}})

 "tall"
 {:synsem {:cat :adjective
           :sem {:pred :tall
                 :subj {:prop {:human true}}}}}

 "teach"  {:synsem {:cat :verb
                    :sem {:pred :teach}}
           :english {:past "taught"}}

 "telephone" {:synsem {:cat :verb
                       :sem {:pred :telephone}}}

 "tell" {:english {:past "told"}
         :synsem {:cat :verb
                  :sem {:pred :tell}}}

 "that" [;; "that": complementizer, as in "she thinks that .."
         (let [obj (atom :top)]
           {:synsem {:cat :comp
                     :comp-type :that
                     :sem {:obj obj
                           :pred :that}
                     :subcat {:1 {:cat :verb
                                  :sem obj
                                  :subcat []}
                              :2 []}}})
         ;; "that": demonstrative, as in "that woman"
         {:synsem {:cat :det
                   :agr {:number :sing}
                   :sem {:pred :demonstrative
                         :of :none}
                   :def :def}}

         ;; "that": complementizer of relative clause as in "the woman that she saw"
         (let [sem (atom :top)
               obj-synsem (atom {:cat :verb
                                 :slash true
                                 :sem sem})]
           {:synsem {:cat :comp
                     :sem sem
                     :subcat {:1 obj-synsem
                              :2 []}}})]

 "the" {:synsem {:cat :det
                 :def :def
                 :sem {:pred :definite
                       :of {:pred nil}}}}
 "their"
 {:synsem {:cat :det
           :sem {:of {:pred :loro}}
           :def :possessive}}

 "themselves"
 {:synsem {:cat :noun
           :pronoun true
           :case :acc
           :reflexive true
           :agr {:person :3rd
                 :number :plur}
           :subcat []}}

 "there" [{:synsem {:cat :noun
                    :pronoun true
                    :case :nom
                    :sem {:null true
                          :pred :existential}
                    :agr {:person :3rd
                          :number :sing}}}
          {:synsem {:cat :noun
                    :pronoun true
                    :case :nom
                    :sem {:null true
                          :pred :existential}
                    :agr {:person :3rd
                          :number :plur}}}]
 "they"
 {:synsem {:cat :noun
           :pronoun true
           :case :nom
           :agr {:person :3rd
                 :number :plur}
           :sem {:pred :loro}
           :subcat []}}

 "think" (let [common {:synsem {:cat :verb
                                :subcat {:1 {:cat :noun
                                             :sem {:prop {:human true}}}}}
                       :english {:past "thought"}}]
           [{:unify [common]
             :synsem {:sem {:pred :think}
                      :subcat {:2 []}}} ;; intransitive
            {:unify [common]
             :synsem {:sem {:pred :think}
                      :subcat {:2 {:cat :comp
                                   :comp-type :that
                                   :subcat []}
                               :3 []}}}])
 "those" {:synsem {:cat :det
                   :agr {:number :plur}
                   :sem {:pred :demonstrative
                         :of :none}
                   :def :def}}

 "throw" (let [common {:english {:past "threw"
                                 :past-participle "thrown"}}
               throw-out {:phrasal-verb true
                          :synsem {:cat :verb
                                   :sem {:pred :throw-out}}}]
           [{:unify [common]
             :synsem {:cat :verb
                      :sem {:pred :throw}}}
            {:unify [common]
             :english {:note "t-"}
             :synsem  {:cat :verb
                       :sem {:pred :throw-t}}}
            {:unify [common]
             :english {:note "g-"}
             :synsem  {:cat :verb
                       :sem {:pred :throw-g}}}
            {:unify [common]
             :english {:note "b-"}
             :synsem  {:cat :verb
                       :sem {:pred :throw-b}}}
            {:unify [common throw-out]
             :synsem {:subcat {:2 {:cat :prep
                                   :sem {:pred :out}}}}}
            {:unify [common throw-out]
             :synsem {:subcat {:3 {:cat :prep
                                   :sem {:pred :out}}}}}])

 "to" {:synsem {:cat :prep
                :subcat {:1 {:cat :noun}}
                :sem {:pred :to}}}

 "transfer" {:english {:past "transferred"
                       :participle "transferring"}
             :synsem {:cat :verb
                      :sem {:pred :transfer}}}

 "treat" {:synsem {:cat :verb
                   :sem {:pred :treat}}}

 "try" [{:modal-with :infinitive
         :synsem {:cat :verb
                  :sem {:pred :try}}}
        {:synsem {:cat :verb
                  :sem {:pred :try}
                  :subcat {:2 []}}}]

 "turn" ;; TODO: factor out a 'common' and a 'turn down/up/off/on' as we do above for "throw out".
 ;; TODO: too much specific and repeated content here; capture in lexical compilation rules.
 [;; "turn the radio down"
  {:phrasal-verb true
   :applied {:ditrans false}
   :synsem {:cat :verb
            :sem {:pred :turn-down}
            :subcat {:3 {:cat :noun
                         :subcat []}
                     :2 {:cat :prep
                         :sem {:pred :down}}}}}
  ;; "turn down the radio"
  {:phrasal-verb true
   :applied {:ditrans false}
   :synsem {:cat :verb
            :sem {:pred :turn-down}
            :subcat {:3 {:cat :prep
                         :sem {:pred :down}}}}}

  ;; "turn the radio off"
  {:phrasal-verb true
   :applied {:ditrans false}
   :synsem {:cat :verb
            :sem {:pred :turn-off}
            :subcat {:3 {:cat :noun
                         :subcat []}
                     :2 {:cat :prep
                         :sem {:pred :off}}}}}

  ;; "turn off the radio"
  {:phrasal-verb true
   :applied {:ditrans false}
   :synsem {:cat :verb
            :sem {:pred :turn-off}
            :subcat {:3 {:cat :prep
                         :sem {:pred :off}}}}}
  ;; "turn the radio on"
  {:phrasal-verb true
   :applied {:ditrans false}
   :synsem {:cat :verb
            :sem {:pred :turn-on}
            :subcat {:3 {:cat :noun
                         :subcat []}
                     :2 {:cat :prep
                         :sem {:pred :on}}}}}
  ;; "turn on the radio"
  {:phrasal-verb true
   :applied {:ditrans false}
   :synsem {:cat :verb
            :sem {:pred :turn-on}
            :subcat {:3 {:cat :prep
                         :sem {:pred :on}}}}}
  ;; "turn the radio up"
  {:phrasal-verb true
   :applied {:ditrans false}
   :synsem {:cat :verb
            :sem {:pred :turn-up}
            :subcat {:3 {:cat :noun
                         :subcat []}
                     :2 {:cat :prep
                         :sem {:pred :up}}}}}
  ;; "turn up the radio"
  {:phrasal-verb true
   :applied {:ditrans false}
   :synsem {:cat :verb
            :sem {:pred :turn-up}
            :subcat {:2 {:cat :noun
                         :subcat []}
                     :3 {:cat :prep
                         :sem {:pred :up}}}}}]
 

 "understand" (let [common {:english {:past "understood"}}]
                [{:unify [common]
                  :synsem {:cat :verb
                           :sem {:pred :understand}}}
                 {:unify [common]
                  :synsem {:cat :verb
                           :sem {:pred :understand-deeply}}
                  :english {:note "deeply"}}
                 {:unify [common]
                  :synsem {:cat :verb
                           :sem {:pred :understand-simply}}
                  :english {:note "simply"}}])

 "up" {:synsem {:cat :prep
                :sem {:pred :up}
                :subcat []}}
 
 "upload"  {:synsem {:cat :verb
                     :sem {:pred :caricare}}}

 "use"  {:synsem {:cat :verb
                  :sem {:pred :use}}}

 "wait"  {:synsem {:cat :verb
                   :sem {:pred :wait-for}
                   :subcat {:2 {:sem {:pred :for}}}}}

 "wake up"
 {:synsem {:cat :verb
           :sem {:pred :wake-up
                 :reflexive true}
           :subcat {:2 []}}
  :english {:participle "waking up"
            :present {:3sing "wakes up"}
            :past-participle "woken up"
            :past "woke up"}}

 "walk" [{:synsem {:cat :verb
                   :sem {:pred :walk}}}
         {:synsem {:cat :verb
                   :sem {:pred :walk-c}}}]

 "want" [{:english {:present-progressive :avoid}
          :modal-with :infinitive
          :synsem {:cat :verb
                   :sem {:pred :want}}}

         {:english {:present-progressive :avoid}
          :synsem {:cat :verb
                   :sem {:pred :want}}}]

 "warm" (let [common {:english {:past "warmed up"
                                :participle "warming up"}}]
          [;; 1. non-reflexive
           {:unify [common]
            :synsem {:cat :verb
                     :sem {:pred :warm-up}}}
           ;; 2. reflexive
           (let [subject-semantics (atom :top)]
             {:unify [common]
              :synsem {:cat :verb
                       :sem {:pred :warm-up
                             :reflexive true
                             :subj subject-semantics
                             :obj subject-semantics}
                       :subcat {:1 {:sem subject-semantics}
                                :2 {:pronoun true
                                    :reflexive true
                                    :sem subject-semantics}}}})])
 "warn" {:synsem {:cat :verb
                  :sem {:pred :warn}}}

 "wash" [;; 1. non-reflexive
         {:synsem {:cat :verb
                   :sem {:pred :wash}}}
         ;; 2. reflexive
         {:synsem {:cat :verb
                   :sem {:pred :wash-oneself
                         :reflexive true}}}]

 "waste" {:synsem {:cat :verb
                   :sem {:pred :waste}}}

 "watch" {:synsem {:cat :verb
                   :sem {:pred :watch}}}

 "water" {:synsem {:cat :noun
                   :sem {:pred :water}}}
 "we"
 {:synsem {:cat :noun
           :pronoun true
           :case :nom
           :agr {:person :1st
                 :number :plur}
           :sem {:prop {:human true}
                 :pred :noi}
           :subcat []}}

 "wear" (let [common {:english {:past "wore"
                                :past-participle "worn"}}]
          [{:unify [common]
            :synsem {:cat :verb
                     :sem {:pred :wear}}}
           {:unify [common]
            :synsem {:cat :verb
                     :sem {:pred :wear-l}}
            :english {:note "l-"}}
           {:unify [common]
            :synsem {:cat :verb
                     :sem {:pred :wear-i}}
            :english {:note "i-"}}
           {:unify [common]
            :synsem {:cat :verb
                     :sem {:pred :wear-p}}
            :english {:note "p-"}}])
 "whether"
 (let [obj (atom :top)]
   {:synsem {:cat :comp
             :comp-type :if
             :sem {:obj obj
                   :pred :unspec}
             :subcat {:1 {:cat :verb
                          :subcat []}
                      :2 []}}})

 "win"  {:synsem {:cat :verb
                  :sem {:pred :win}}
         :english {:past "won"
                   :participle "winning"}}

 "wine" {:synsem {:cat :noun
                  :sem {:pred :vino}}}

 "with" {:synsem {:cat :prep
                  :subcat {:1 {:cat :noun}}
                  :sem {:pred :with}}}

 "woman" {:english {:plur "women"}
          :synsem {:agr {:gender :fem}
                   :cat :noun
                   :sem {:prop {:human true
                                :child false}
                         :pred :woman}}}

 "wonder" {:synsem {:cat :verb
                    :sem {:pred :wonder}
                    :subcat {:1 {:cat :noun}
                             :2 {:cat :comp
                                 :comp-type :if
                                 :subcat []}}}}
 "word" {:synsem {:cat :noun
                  :sem {:pred :word}}}

 "work" [{:synsem {:cat :verb
                   :sem {:pred :work-human}}
          :english {:note "human"}}

         {:english {:note "nonliving or machines"} ;; TODO: add support in UI for :note.
          :synsem {:cat :verb
                   :sem {:pred :work-nonhuman}}}]

 "wound" {:synsem {:cat :verb
                   :sem {:pred :wound}}}

 "worry" {:english {:past "worried"
                    :participle "worrying"
                    :past-participle "worried"}
          :synsem {:cat :verb
                   :sem {:reflexive true
                         :pred :worry}
                   :subcat {:2 []}}}

 "write"  {:english {:past "wrote"
                     :past-participle "written"}
           :synsem {:cat :verb
                    :sem {:pred :write}}}

 "yell" {:synsem {:cat :verb
                  :sem {:pred :yell}
                  :subcat {:2 {:cat :prep
                               :sem {:pred :at}}}}}
 "yellow"
 {:synsem {:cat :adjective
           :sem {:pred :yellow
                 :subj {:prop {:physical-object true
                               :human false}}}}}
 "you"
 {:synsem {:cat :noun
           :pronoun true
           :reflexive false
           :agr {:person :2nd
                 :number :sing}
           :sem {:prop {:human true}
                 :pred :tu}}}
 "you all"
 [{:synsem {:cat :noun
            :pronoun true
            :reflexive false
            :case :top ;; see comment in "it" about :case.
            :agr {:person :2nd
                  :number :plur}
            :sem {:prop {:human true}
                  :reflexive false
                  :pred :voi}
            :subcat []}}

  {:english {:note "v"}
   :synsem {:cat :noun
            :pronoun true
            :reflexive false
            :case :top ;; see comment in "it" about :case.
            :agr {:person :2nd
                  :number :plur}
            :sem {:prop {:human true}
                  :reflexive false
                  :pred :vosotros} ;; for Spanish, vosotros/ustedes a semantic distinction
            :subcat []}}

  {:english {:note "u"}
   :synsem {:cat :noun
            :pronoun true
            :reflexive false
            :case :top ;; see comment in "it" about :case.
            :agr {:person :2nd
                  :number :plur}
            :sem {:prop {:human true}
                  :reflexive false
                  :pred :ustedes}  ;; for Spanish, vosotros/ustedes a semantic distinction
            :subcat []}}]

 "your"
 {:synsem {:cat :det
           :sem {:of {:pred :tu}}
           :def :possessive}}

 "yourself"
 {:synsem {:cat :noun
           :pronoun true
           :case :acc
           :reflexive true
           :agr {:person :2nd
                 :number :sing}
           :sem {:prop {:human true}
                 :pred :tu}
           :subcat []}}

 "yourselves"
 {:synsem {:cat :noun
           :pronoun true
           :case :acc
           :reflexive true
           :agr {:person :2nd
                 :number :plur}
           :sem {:prop {:human true}
                 :pred :voi}
           :subcat []}}}
